#------------------------------------------------------------------------------
# set to true to see internal appender debug statements
#------------------------------------------------------------------------------
log4j.debug = false

#------------------------------------------------------------------------------
# create a logger called JDBC_ASYNC 
#------------------------------------------------------------------------------
log4j.logger.JDBC_ASYNC = DEBUG, JDBC_ASYNC
log4j.additivity.JDBC_ASYNC = false

#------------------------------------------------------------------------------
# create an appender called JDBC_ASYNC
#
# Note the SqlServer Driver Properties that you can set in the "url" option: 
#	http://msdn.microsoft.com/en-us/library/ms378988.aspx
#
#------------------------------------------------------------------------------
log4j.appender.JDBC_ASYNC = org.exaspace.log4jq.AsyncJdbcAppender
log4j.appender.JDBC_ASYNC.url = jdbc:sqlserver://localhost:1433;loginTimeout=10;database=mylogdb;applicationName=myapp;workstationID=mybox;
log4j.appender.JDBC_ASYNC.driver = com.microsoft.sqlserver.jdbc.SQLServerXADataSource
log4j.appender.JDBC_ASYNC.user = loguser
log4j.appender.JDBC_ASYNC.password = logpass

# attempt to reconnect to the database after an outage with the given periodicity
# recommended value = 10000 (10 seconds)
log4j.appender.JDBC_ASYNC.reconnectTimeMillis = 10000

# the sql for the prepared statement - containing a wildcard '?' for each parameter
log4j.appender.JDBC_ASYNC.sql = exec sp_log ?, ?, ?, ?, ?, ?

# a sequence of log4j patterns (see log4j EnhancedPatternLayout docs) separated by sqlParamsSeparator
log4j.appender.JDBC_ASYNC.sqlParams = %F:%L, %p, %t, %x, %m, %throwable

# the string that separates the sql params (to identify which pattern maps to each wildcard)
log4j.appender.JDBC_ASYNC.sqlParamsSeparator = ,

# you need this (slow!) if using location pattern conversions like %F
log4j.appender.JDBC_ASYNC.locationInfo = true

# the max size of the memory queue
log4j.appender.JDBC_ASYNC.maxElements = 1000000

# report a periodic warning if number of messages in queue exceeds given value
log4j.appender.JDBC_ASYNC.warningThreshold = 100000

# how often (in milliseconds) to report warnings (recommended at least 1000)
# set to -1 to disable error reporting (will generate a warning on startup)
log4j.appender.JDBC_ASYNC.errorReportIntervalMillis = 5000

# how long to process messages still in queue after shutdown
# set to -1 to exit immediately (will lose any messages still in memory) 
log4j.appender.JDBC_ASYNC.gracefulShutdownTimeMillis = 600000
