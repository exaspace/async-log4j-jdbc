# Example configuration file for async-log4j-jdbc

#------------------------------------------------------------------------------
# Set to true to see internal appender debug statements
#------------------------------------------------------------------------------
log4j.debug = false

#------------------------------------------------------------------------------
# Create a logger called JDBC_ASYNC
#------------------------------------------------------------------------------
log4j.logger.JDBC_ASYNC = DEBUG, JDBC_ASYNC
log4j.additivity.JDBC_ASYNC = false

#------------------------------------------------------------------------------
# Create an appender of class AsyncJdbcAppender and name it "JDBC_ASYNC"
#------------------------------------------------------------------------------
log4j.appender.JDBC_ASYNC = org.exaspace.log4jq.AsyncJdbcAppender
log4j.appender.JDBC_ASYNC.url = jdbc:postgresql://localhost/mylogs
log4j.appender.JDBC_ASYNC.driver = org.postgresql.Driver
log4j.appender.JDBC_ASYNC.user =
log4j.appender.JDBC_ASYNC.password =

# The appender will attempt to reconnect to the database after an outage with the given delay
# Recommended value = 10000 (10 seconds)
log4j.appender.JDBC_ASYNC.reconnectTimeMillis = 10000

# Set the SQL to use to insert the log event into the database - use a '?' character for each parameter
# Note that you will of course need to ensure the table exists first: the appender will not create the table for you
# Example value:
#   INSERT INTO applog (LogDate, Logger , Priority ,ThreadID , Context, Message , Trace) VALUES (getDate(), ?, ?, ?, ?, LEFT(ISNULL(?,''),6000), ?)
log4j.appender.JDBC_ASYNC.sql = INSERT INTO applog (LogDate, Logger , Priority ,ThreadID , Context, Message , Trace) VALUES (getDate(), ?, ?, ?, ?, LEFT(ISNULL(?,''),6000), ?)

# The sequence of log4j patterns (see log4j EnhancedPatternLayout docs) separated by sqlParamsSeparator
log4j.appender.JDBC_ASYNC.sqlParams = %F:%L, %p, %t, %x, %m, %throwable

# Specify the string that separates the sql params (to identify which pattern maps to each wildcard)
log4j.appender.JDBC_ASYNC.sqlParamsSeparator = ,

# You need this (slow!) if using location pattern conversions like %F
log4j.appender.JDBC_ASYNC.locationInfo = true

# The max size of the memory queue
log4j.appender.JDBC_ASYNC.maxElements = 1000000

# Report a periodic warning if number of messages in queue exceeds the given value
log4j.appender.JDBC_ASYNC.warningThreshold = 100000

# How often (in milliseconds) to report warnings (recommended at least 1000)
# set to -1 to disable error reporting (will generate a warning on startup)
log4j.appender.JDBC_ASYNC.errorReportIntervalMillis = 5000

# How long to process messages still in queue after shutdown
# set to -1 to exit immediately (will lose any messages still in memory)
log4j.appender.JDBC_ASYNC.gracefulShutdownTimeMillis = 600000
